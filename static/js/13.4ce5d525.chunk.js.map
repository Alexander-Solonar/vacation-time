{"version":3,"file":"static/js/13.4ce5d525.chunk.js","mappings":"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","sources":["../node_modules/date-fns/_lib/defaultOptions.mjs","../node_modules/date-fns/_lib/format/longFormatters.mjs","../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs","../node_modules/date-fns/_lib/protectedTokens.mjs","../node_modules/date-fns/constants.mjs","../node_modules/date-fns/constructFrom.mjs","../node_modules/date-fns/startOfDay.mjs","../node_modules/date-fns/differenceInCalendarDays.mjs","../node_modules/date-fns/startOfYear.mjs","../node_modules/date-fns/getDayOfYear.mjs","../node_modules/date-fns/_lib/addLeadingZeros.mjs","../node_modules/date-fns/_lib/format/lightFormatters.mjs","../node_modules/date-fns/_lib/format/formatters.mjs","../node_modules/date-fns/isDate.mjs","../node_modules/date-fns/isValid.mjs","../node_modules/date-fns/format.mjs","../node_modules/date-fns/startOfISOWeekYear.mjs","../node_modules/date-fns/getISOWeek.mjs","../node_modules/date-fns/getISOWeekYear.mjs","../node_modules/date-fns/startOfWeekYear.mjs","../node_modules/date-fns/getWeek.mjs","../node_modules/date-fns/getWeekYear.mjs","../node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs","../node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs","../node_modules/date-fns/locale/en-US/_lib/formatLong.mjs","../node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs","../node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs","../node_modules/date-fns/locale/_lib/buildMatchFn.mjs","../node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs","../node_modules/date-fns/locale/en-US.mjs","../node_modules/date-fns/locale/en-US/_lib/localize.mjs","../node_modules/date-fns/locale/en-US/_lib/match.mjs","../node_modules/date-fns/getDefaultOptions.mjs","../node_modules/date-fns/transpose.mjs","../node_modules/date-fns/parse/_lib/Setter.mjs","../node_modules/date-fns/parse/_lib/Parser.mjs","../node_modules/date-fns/parse/_lib/constants.mjs","../node_modules/date-fns/parse/_lib/utils.mjs","../node_modules/date-fns/setWeek.mjs","../node_modules/date-fns/setISOWeek.mjs","../node_modules/date-fns/parse/_lib/parsers/DateParser.mjs","../node_modules/date-fns/addDays.mjs","../node_modules/date-fns/setDay.mjs","../node_modules/date-fns/getISODay.mjs","../node_modules/date-fns/setISODay.mjs","../node_modules/date-fns/parse/_lib/parsers.mjs","../node_modules/date-fns/parse/_lib/parsers/EraParser.mjs","../node_modules/date-fns/parse/_lib/parsers/YearParser.mjs","../node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.mjs","../node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.mjs","../node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.mjs","../node_modules/date-fns/parse/_lib/parsers/QuarterParser.mjs","../node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.mjs","../node_modules/date-fns/parse/_lib/parsers/MonthParser.mjs","../node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.mjs","../node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.mjs","../node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.mjs","../node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.mjs","../node_modules/date-fns/parse/_lib/parsers/DayParser.mjs","../node_modules/date-fns/parse/_lib/parsers/LocalDayParser.mjs","../node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.mjs","../node_modules/date-fns/parse/_lib/parsers/ISODayParser.mjs","../node_modules/date-fns/parse/_lib/parsers/AMPMParser.mjs","../node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.mjs","../node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.mjs","../node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.mjs","../node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.mjs","../node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.mjs","../node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.mjs","../node_modules/date-fns/parse/_lib/parsers/MinuteParser.mjs","../node_modules/date-fns/parse/_lib/parsers/SecondParser.mjs","../node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.mjs","../node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.mjs","../node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.mjs","../node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.mjs","../node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.mjs","../node_modules/date-fns/parse.mjs","../node_modules/date-fns/startOfISOWeek.mjs","../node_modules/date-fns/startOfWeek.mjs","../node_modules/date-fns/toDate.mjs"],"sourcesContent":["let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","import { toDate } from \"../toDate.mjs\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n","/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { millisecondsInDay } from \"./constants.mjs\";\nimport { startOfDay } from \"./startOfDay.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = startOfDay(dateLeft);\n  const startOfDayRight = startOfDay(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date) {\n  const cleanDate = toDate(date);\n  const _date = constructFrom(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { startOfYear } from \"./startOfYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date) {\n  const _date = toDate(date);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.mjs\";\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\nimport { getWeek } from \"../../getWeek.mjs\";\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\nimport { lightFormatters } from \"./lightFormatters.mjs\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(date.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    const timestamp = date.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { formatters } from \"./_lib/format/formatters.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { getISOWeekYear } from \"./getISOWeekYear.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date) {\n  const year = getISOWeekYear(date);\n  const fourthOfJanuary = constructFrom(date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date) {\n  const _date = toDate(date);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getWeekYear } from \"./getWeekYear.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport function getWeek(date, options) {\n  const _date = toDate(date);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\nimport { localize } from \"./en-US/_lib/localize.mjs\";\nimport { match } from \"./en-US/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { getDefaultOptions as getInternalDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * @name getDefaultOptions\n * @category Common Helpers\n * @summary Get default options.\n * @pure false\n *\n * @description\n * Returns an object that contains defaults for\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\n * arguments for all functions.\n *\n * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).\n *\n * @returns The default options\n *\n * @example\n * const result = getDefaultOptions()\n * //=> {}\n *\n * @example\n * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })\n * const result = getDefaultOptions()\n * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }\n */\nexport function getDefaultOptions() {\n  return Object.assign({}, getInternalDefaultOptions());\n}\n\n// Fallback for modularized imports:\nexport default getDefaultOptions;\n","import { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam DateInputType - The input `Date` type derived from the passed argument.\n * @typeParam DateOutputType - The output `Date` type derived from the passed constructor.\n *\n * @param fromDate - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\n */\nexport function transpose(fromDate, constructor) {\n  const date =\n    constructor instanceof Date\n      ? constructFrom(constructor, 0)\n      : new constructor(0);\n  date.setFullYear(\n    fromDate.getFullYear(),\n    fromDate.getMonth(),\n    fromDate.getDate(),\n  );\n  date.setHours(\n    fromDate.getHours(),\n    fromDate.getMinutes(),\n    fromDate.getSeconds(),\n    fromDate.getMilliseconds(),\n  );\n  return date;\n}\n\n// Fallback for modularized imports:\nexport default transpose;\n","import { transpose } from \"../../transpose.mjs\";\nimport { constructFrom } from \"../../constructFrom.mjs\";\n\nconst TIMEZONE_UNIT_PRIORITY = 10;\n\nexport class Setter {\n  subPriority = 0;\n\n  validate(_utcDate, _options) {\n    return true;\n  }\n}\n\nexport class ValueSetter extends Setter {\n  constructor(\n    value,\n\n    validateValue,\n\n    setValue,\n\n    priority,\n    subPriority,\n  ) {\n    super();\n    this.value = value;\n    this.validateValue = validateValue;\n    this.setValue = setValue;\n    this.priority = priority;\n    if (subPriority) {\n      this.subPriority = subPriority;\n    }\n  }\n\n  validate(date, options) {\n    return this.validateValue(date, this.value, options);\n  }\n\n  set(date, flags, options) {\n    return this.setValue(date, flags, this.value, options);\n  }\n}\n\nexport class DateToSystemTimezoneSetter extends Setter {\n  priority = TIMEZONE_UNIT_PRIORITY;\n  subPriority = -1;\n  set(date, flags) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, transpose(date, Date));\n  }\n}\n","import { ValueSetter } from \"./Setter.mjs\";\n\nexport class Parser {\n  run(dateString, token, match, options) {\n    const result = this.parse(dateString, token, match, options);\n    if (!result) {\n      return null;\n    }\n\n    return {\n      setter: new ValueSetter(\n        result.value,\n        this.validate,\n        this.set,\n        this.priority,\n        this.subPriority,\n      ),\n      rest: result.rest,\n    };\n  }\n\n  validate(_utcDate, _value, _options) {\n    return true;\n  }\n}\n","export const numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/, // 0 to 9999, -0 to -9999\n};\n\nexport const timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/,\n};\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n  millisecondsInSecond,\n} from \"../../constants.mjs\";\nimport { numericPatterns } from \"./constants.mjs\";\n\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nexport function parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n    case \"evening\":\n      return 17;\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n","import { getWeek } from \"./getWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link setWeek} function options.\n */\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param week - The week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week set\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * const result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * const result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nexport function setWeek(date, week, options) {\n  const _date = toDate(date);\n  const diff = getWeek(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setWeek;\n","import { getISOWeek } from \"./getISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param week - The ISO week of the new date\n *\n * @returns The new date with the ISO week set\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport function setISOWeek(date, week) {\n  const _date = toDate(date);\n  const diff = getISOWeek(_date) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setISOWeek;\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.mjs\";\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n];\n\n// Day of the month\nexport class DateParser extends Parser {\n  priority = 90;\n  subPriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"d\":\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case \"do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    const month = date.getMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setDate(value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount) {\n  const _date = toDate(date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { addDays } from \"./addDays.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const currentDay = _date.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(_date, diff);\n}\n\n// Fallback for modularized imports:\nexport default setDay;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of ISO week\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\nexport function getISODay(date) {\n  const _date = toDate(date);\n  let day = _date.getDay();\n\n  if (day === 0) {\n    day = 7;\n  }\n\n  return day;\n}\n\n// Fallback for modularized imports:\nexport default getISODay;\n","import { addDays } from \"./addDays.mjs\";\nimport { getISODay } from \"./getISODay.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday etc.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param day - The day of the ISO week of the new date\n *\n * @returns The new date with the day of the ISO week set\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setISODay(date, day) {\n  const _date = toDate(date);\n  const currentDay = getISODay(_date);\n  const diff = day - currentDay;\n  return addDays(_date, diff);\n}\n\n// Fallback for modularized imports:\nexport default setISODay;\n","import { EraParser } from \"./parsers/EraParser.mjs\";\nimport { YearParser } from \"./parsers/YearParser.mjs\";\nimport { LocalWeekYearParser } from \"./parsers/LocalWeekYearParser.mjs\";\nimport { ISOWeekYearParser } from \"./parsers/ISOWeekYearParser.mjs\";\nimport { ExtendedYearParser } from \"./parsers/ExtendedYearParser.mjs\";\nimport { QuarterParser } from \"./parsers/QuarterParser.mjs\";\nimport { StandAloneQuarterParser } from \"./parsers/StandAloneQuarterParser.mjs\";\nimport { MonthParser } from \"./parsers/MonthParser.mjs\";\nimport { StandAloneMonthParser } from \"./parsers/StandAloneMonthParser.mjs\";\nimport { LocalWeekParser } from \"./parsers/LocalWeekParser.mjs\";\nimport { ISOWeekParser } from \"./parsers/ISOWeekParser.mjs\";\nimport { DateParser } from \"./parsers/DateParser.mjs\";\nimport { DayOfYearParser } from \"./parsers/DayOfYearParser.mjs\";\nimport { DayParser } from \"./parsers/DayParser.mjs\";\nimport { LocalDayParser } from \"./parsers/LocalDayParser.mjs\";\nimport { StandAloneLocalDayParser } from \"./parsers/StandAloneLocalDayParser.mjs\";\nimport { ISODayParser } from \"./parsers/ISODayParser.mjs\";\nimport { AMPMParser } from \"./parsers/AMPMParser.mjs\";\nimport { AMPMMidnightParser } from \"./parsers/AMPMMidnightParser.mjs\";\nimport { DayPeriodParser } from \"./parsers/DayPeriodParser.mjs\";\nimport { Hour1to12Parser } from \"./parsers/Hour1to12Parser.mjs\";\nimport { Hour0to23Parser } from \"./parsers/Hour0to23Parser.mjs\";\nimport { Hour0To11Parser } from \"./parsers/Hour0To11Parser.mjs\";\nimport { Hour1To24Parser } from \"./parsers/Hour1To24Parser.mjs\";\nimport { MinuteParser } from \"./parsers/MinuteParser.mjs\";\nimport { SecondParser } from \"./parsers/SecondParser.mjs\";\nimport { FractionOfSecondParser } from \"./parsers/FractionOfSecondParser.mjs\";\nimport { ISOTimezoneWithZParser } from \"./parsers/ISOTimezoneWithZParser.mjs\";\nimport { ISOTimezoneParser } from \"./parsers/ISOTimezoneParser.mjs\";\nimport { TimestampSecondsParser } from \"./parsers/TimestampSecondsParser.mjs\";\nimport { TimestampMillisecondsParser } from \"./parsers/TimestampMillisecondsParser.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- It's ok, we want any here\nexport const parsers = {\n  G: new EraParser(),\n  y: new YearParser(),\n  Y: new LocalWeekYearParser(),\n  R: new ISOWeekYearParser(),\n  u: new ExtendedYearParser(),\n  Q: new QuarterParser(),\n  q: new StandAloneQuarterParser(),\n  M: new MonthParser(),\n  L: new StandAloneMonthParser(),\n  w: new LocalWeekParser(),\n  I: new ISOWeekParser(),\n  d: new DateParser(),\n  D: new DayOfYearParser(),\n  E: new DayParser(),\n  e: new LocalDayParser(),\n  c: new StandAloneLocalDayParser(),\n  i: new ISODayParser(),\n  a: new AMPMParser(),\n  b: new AMPMMidnightParser(),\n  B: new DayPeriodParser(),\n  h: new Hour1to12Parser(),\n  H: new Hour0to23Parser(),\n  K: new Hour0To11Parser(),\n  k: new Hour1To24Parser(),\n  m: new MinuteParser(),\n  s: new SecondParser(),\n  S: new FractionOfSecondParser(),\n  X: new ISOTimezoneWithZParser(),\n  x: new ISOTimezoneParser(),\n  t: new TimestampSecondsParser(),\n  T: new TimestampMillisecondsParser(),\n};\n","import { Parser } from \"../Parser.mjs\";\n\nexport class EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return (\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n\n      // A, B\n      case \"GGGGG\":\n        return match.era(dateString, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return (\n          match.era(dateString, { width: \"wide\" }) ||\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"R\", \"u\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { getWeekYear } from \"../../../getWeekYear.mjs\";\nimport { startOfWeek } from \"../../../startOfWeek.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\n\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"YY\",\n    });\n\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"Yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { startOfISOWeek } from \"../../../startOfISOWeek.mjs\";\nimport { constructFrom } from \"../../../constructFrom.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigitsSigned } from \"../utils.mjs\";\n\n// ISO week-numbering year\nexport class ISOWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"R\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    const firstWeekOfYear = constructFrom(date, 0);\n    firstWeekOfYear.setFullYear(value, 0, 4);\n    firstWeekOfYear.setHours(0, 0, 0, 0);\n    return startOfISOWeek(firstWeekOfYear);\n  }\n\n  incompatibleTokens = [\n    \"G\",\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { parseNDigitsSigned } from \"../utils.mjs\";\n\nexport class ExtendedYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"u\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"G\", \"y\", \"Y\", \"R\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { parseNDigits } from \"../utils.mjs\";\n\nexport class QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { parseNDigits } from \"../utils.mjs\";\n\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"LL\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setWeek } from \"../../../setWeek.mjs\";\nimport { startOfWeek } from \"../../../startOfWeek.mjs\";\nimport { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\n// Local week of year\nexport class LocalWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"w\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"wo\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value, options) {\n    return startOfWeek(setWeek(date, value, options), options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setISOWeek } from \"../../../setISOWeek.mjs\";\nimport { startOfISOWeek } from \"../../../startOfISOWeek.mjs\";\nimport { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\n// ISO week of year\nexport class ISOWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"I\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"Io\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value) {\n    return startOfISOWeek(setISOWeek(date, value));\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.mjs\";\n\nexport class DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"D\":\n      case \"DD\":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case \"Do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\n\n// Day of week\nexport class DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { setDay } from \"../../../setDay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits } from \"../utils.mjs\";\n\n// Local day of week\nexport class LocalDayParser extends Parser {\n  priority = 90;\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"e\":\n      case \"ee\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"eo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"eee\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"eeeee\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"eeee\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits } from \"../utils.mjs\";\n\n// Stand-alone local day of week\nexport class StandAloneLocalDayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"c\":\n      case \"cc\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"co\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"ccc\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // T\n      case \"ccccc\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // Tuesday\n      case \"cccc\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setISODay } from \"../../../setISODay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits } from \"../utils.mjs\";\n\n// ISO day of week\nexport class ISODayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case \"i\":\n      case \"ii\": // 02\n        return parseNDigits(token.length, dateString);\n      // 2nd\n      case \"io\":\n        return match.ordinalNumber(dateString, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // T\n      case \"iiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case \"iiiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"short\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case \"iiii\":\n      default:\n        return mapValue(\n          match.day(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"abbreviated\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = setISODay(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { dayPeriodEnumToHours } from \"../utils.mjs\";\n\nexport class AMPMParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n      case \"aaa\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"aaaaa\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"b\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { dayPeriodEnumToHours } from \"../utils.mjs\";\n\nexport class AMPMMidnightParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n      case \"bbb\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"bbbbb\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { dayPeriodEnumToHours } from \"../utils.mjs\";\n\n// in the morning, in the afternoon, in the evening, at night\nexport class DayPeriodParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"BBBBB\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case \"ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour0to23Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"H\":\n        return parseNumericPattern(numericPatterns.hour23h, dateString);\n      case \"Ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 23;\n  }\n\n  set(date, _flags, value) {\n    date.setHours(value, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour0To11Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"K\":\n        return parseNumericPattern(numericPatterns.hour11h, dateString);\n      case \"Ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"h\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour1To24Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"k\":\n        return parseNumericPattern(numericPatterns.hour24h, dateString);\n      case \"ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 24;\n  }\n\n  set(date, _flags, value) {\n    const hours = value <= 24 ? value % 24 : value;\n    date.setHours(hours, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"H\", \"K\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class MinuteParser extends Parser {\n  priority = 60;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"m\":\n        return parseNumericPattern(numericPatterns.minute, dateString);\n      case \"mo\":\n        return match.ordinalNumber(dateString, { unit: \"minute\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setMinutes(value, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class SecondParser extends Parser {\n  priority = 50;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"s\":\n        return parseNumericPattern(numericPatterns.second, dateString);\n      case \"so\":\n        return match.ordinalNumber(dateString, { unit: \"second\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setSeconds(value, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits } from \"../utils.mjs\";\n\nexport class FractionOfSecondParser extends Parser {\n  priority = 30;\n\n  parse(dateString, token) {\n    const valueCallback = (value) =>\n      Math.trunc(value * Math.pow(10, -token.length + 3));\n    return mapValue(parseNDigits(token.length, dateString), valueCallback);\n  }\n\n  set(date, _flags, value) {\n    date.setMilliseconds(value);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { timezonePatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseTimezonePattern } from \"../utils.mjs\";\n\n// Timezone (ISO-8601. +00:00 is `'Z'`)\nexport class ISOTimezoneWithZParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"X\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"XX\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"XXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"XXXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"XXX\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"x\"];\n}\n","import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { timezonePatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseTimezonePattern } from \"../utils.mjs\";\n\n// Timezone (ISO-8601)\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"xxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"xxxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}\n","import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseAnyDigitsSigned } from \"../utils.mjs\";\n\nexport class TimestampSecondsParser extends Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value * 1000), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"../../../constructFrom.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseAnyDigitsSigned } from \"../utils.mjs\";\n\nexport class TimestampMillisecondsParser extends Parser {\n  priority = 20;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getDefaultOptions } from \"./getDefaultOptions.mjs\";\nimport { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { parsers } from \"./parse/_lib/parsers.mjs\";\nimport { DateToSystemTimezoneSetter } from \"./parse/_lib/Setter.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { longFormatters, parsers };\n\n/**\n * The {@link parse} function options.\n */\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\n\nconst notWhitespaceRegExp = /\\S/;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateStr - The string to parse\n * @param formatStr - The string of tokens\n * @param referenceDate - defines values missing from the parsed dateString\n * @param options - An object with options.\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @returns The parsed date\n *\n * @throws `options.locale` must contain `match` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nexport function parse(dateStr, formatStr, referenceDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  if (formatStr === \"\") {\n    if (dateStr === \"\") {\n      return toDate(referenceDate);\n    } else {\n      return constructFrom(referenceDate, NaN);\n    }\n  }\n\n  const subFnOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  // If timezone isn't specified, it will be set to the system timezone\n  const setters = [new DateToSystemTimezoneSetter()];\n\n  const tokens = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter in longFormatters) {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp);\n\n  const usedTokens = [];\n\n  for (let token of tokens) {\n    if (\n      !options?.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n    if (\n      !options?.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n\n    const firstCharacter = token[0];\n    const parser = parsers[firstCharacter];\n    if (parser) {\n      const { incompatibleTokens } = parser;\n      if (Array.isArray(incompatibleTokens)) {\n        const incompatibleToken = usedTokens.find(\n          (usedToken) =>\n            incompatibleTokens.includes(usedToken.token) ||\n            usedToken.token === firstCharacter,\n        );\n        if (incompatibleToken) {\n          throw new RangeError(\n            `The format string mustn't contain \\`${incompatibleToken.fullToken}\\` and \\`${token}\\` at the same time`,\n          );\n        }\n      } else if (parser.incompatibleTokens === \"*\" && usedTokens.length > 0) {\n        throw new RangeError(\n          `The format string mustn't contain \\`${token}\\` and any other token at the same time`,\n        );\n      }\n\n      usedTokens.push({ token: firstCharacter, fullToken: token });\n\n      const parseResult = parser.run(\n        dateStr,\n        token,\n        locale.match,\n        subFnOptions,\n      );\n\n      if (!parseResult) {\n        return constructFrom(referenceDate, NaN);\n      }\n\n      setters.push(parseResult.setter);\n\n      dateStr = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      }\n\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\n      if (dateStr.indexOf(token) === 0) {\n        dateStr = dateStr.slice(token.length);\n      } else {\n        return constructFrom(referenceDate, NaN);\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {\n    return constructFrom(referenceDate, NaN);\n  }\n\n  const uniquePrioritySetters = setters\n    .map((setter) => setter.priority)\n    .sort((a, b) => b - a)\n    .filter((priority, index, array) => array.indexOf(priority) === index)\n    .map((priority) =>\n      setters\n        .filter((setter) => setter.priority === priority)\n        .sort((a, b) => b.subPriority - a.subPriority),\n    )\n    .map((setterArray) => setterArray[0]);\n\n  let date = toDate(referenceDate);\n\n  if (isNaN(date.getTime())) {\n    return constructFrom(referenceDate, NaN);\n  }\n\n  const flags = {};\n  for (const setter of uniquePrioritySetters) {\n    if (!setter.validate(date, subFnOptions)) {\n      return constructFrom(referenceDate, NaN);\n    }\n\n    const result = setter.set(date, flags, subFnOptions);\n    // Result is tuple (date, flags)\n    if (Array.isArray(result)) {\n      date = result[0];\n      Object.assign(flags, result[1]);\n      // Result is date\n    } else {\n      date = result;\n    }\n  }\n\n  return constructFrom(referenceDate, date);\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default parse;\n","import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date) {\n  return startOfWeek(date, { weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n"],"names":["defaultOptions","getDefaultOptions","dateLongFormatter","pattern","formatLong","date","width","timeLongFormatter","time","longFormatters","p","P","dateTimeLongFormatter","matchResult","match","datePattern","timePattern","dateTimeFormat","dateTime","replace","getTimezoneOffsetInMilliseconds","_date","toDate","utcDate","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isProtectedDayOfYearToken","token","test","isProtectedWeekYearToken","warnOrThrowProtectedError","format","input","_message","subject","concat","toLowerCase","message","console","warn","includes","RangeError","Math","pow","millisecondsInWeek","millisecondsInDay","millisecondsInMinute","millisecondsInHour","millisecondsInSecond","constructFrom","value","constructor","startOfDay","setHours","differenceInCalendarDays","dateLeft","dateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","startOfYear","cleanDate","setFullYear","getDayOfYear","addLeadingZeros","number","targetLength","abs","toString","padStart","lightFormatters","y","signedYear","year","length","M","month","String","d","a","dayPeriodEnumValue","toUpperCase","h","H","m","s","S","numberOfDigits","milliseconds","trunc","dayPeriodEnum","formatters","G","localize","era","ordinalNumber","unit","Y","options","signedWeekYear","getWeekYear","weekYear","R","getISOWeekYear","u","Q","quarter","ceil","context","q","L","w","week","getWeek","I","isoWeek","getISOWeek","D","dayOfYear","E","dayOfWeek","getDay","day","e","localDayOfWeek","weekStartsOn","c","i","isoDayOfWeek","dayPeriod","b","hours","B","K","k","X","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","getTime","T","offset","delimiter","arguments","undefined","sign","absOffset","minutes","isDate","Object","prototype","call","isValid","isNaN","Number","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","formatStr","_ref","_options$locale","_ref2","_ref3","_ref4","_options$firstWeekCon","_options$locale2","_defaultOptions$local","_ref5","_ref6","_ref7","_options$weekStartsOn","_options$locale3","_defaultOptions$local2","locale","defaultLocale","firstWeekContainsDate","originalDate","parts","map","substring","firstCharacter","longFormatter","join","isToken","cleanEscapedString","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","formatter","matched","startOfISOWeekYear","fourthOfJanuary","startOfISOWeek","diff","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfWeekYear","firstWeek","startOfWeek","firstWeekOfNextYear","firstWeekOfThisYear","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","defaultWidth","formats","full","long","medium","short","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","valuesArray","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","array","predicate","findIndex","object","hasOwnProperty","findKey","valueCallback","rest","slice","enUS","code","formatDistance","count","result","tokenValue","addSuffix","comparison","formatRelative","_baseDate","_options","dirtyNumber","rem100","narrow","abbreviated","wide","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","parseInt","parseResult","any","index","assign","getInternalDefaultOptions","transpose","fromDate","Setter","_defineProperty","validate","_utcDate","ValueSetter","validateValue","setValue","priority","subPriority","super","this","set","flags","DateToSystemTimezoneSetter","timestampIsSet","Parser","run","dateString","parse","setter","_value","numericPatterns","timezonePatterns","mapValue","parseFnResult","mapFn","parseNumericPattern","parseTimezonePattern","seconds","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","isLeapYearIndex","setWeek","setDate","setISOWeek","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","addDays","amount","NaN","setDay","currentDay","delta","getISODay","setISODay","parsers","isTwoDigitYear","normalizedTwoDigitYear","_flags","firstWeekOfYear","setMonth","isLeapYear","wholeWeekDays","floor","isPM","setMinutes","setSeconds","setMilliseconds","notWhitespaceRegExp","dateStr","referenceDate","subFnOptions","setters","tokens","usedTokens","parser","incompatibleTokens","incompatibleToken","find","usedToken","fullToken","push","indexOf","uniquePrioritySetters","sort","filter","setterArray","argument","argStr"],"sourceRoot":""}